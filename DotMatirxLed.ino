/*
  keyestudio 4WD Robot v2.0
  lesson 9.2
  matrix
  http://www.keyestudio.com
*/

short z = 0;
short y = 0;

//Array, used to store the data of pattern, can be calculated by yourself or obtained from the modulus tool
unsigned char start01[] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01};
unsigned char front[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x12, 0x09, 0x12, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
unsigned char back[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x48, 0x90, 0x48, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
unsigned char left[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x28, 0x10, 0x44, 0x28, 0x10, 0x44, 0x28, 0x10, 0x00};
unsigned char right[] = {0x00, 0x10, 0x28, 0x44, 0x10, 0x28, 0x44, 0x10, 0x28, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
unsigned char STOP01[] = {0x2E, 0x2A, 0x3A, 0x00, 0x02, 0x3E, 0x02, 0x00, 0x3E, 0x22, 0x3E, 0x00, 0x3E, 0x0A, 0x0E, 0x00};

unsigned char I[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x42, 0x7e, 0x42, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
unsigned char hearth01[] = {0x00, 0x00, 0x00, 0x1e, 0x21, 0x41, 0x41, 0x82, 0x82, 0x41, 0x41, 0x21, 0x1e, 0x00, 0x00, 0x00};
unsigned char hearth02[] = {0x0c, 0x1e, 0x3e, 0x7c, 0x3e, 0x1e, 0x0c, 0x00, 0x02, 0x07, 0x0e, 0x27, 0x72, 0xe0, 0x70, 0x20};
unsigned char you[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x40, 0x40, 0x40, 0x40, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00};

unsigned char amongus[] = {0x3c, 0xfe, 0x81, 0xc5, 0x8b, 0xfa, 0x2a, 0x14, 0x18, 0x0c, 0x00, 0xf0, 0x94, 0xdc, 0x94, 0xf0};

unsigned char iloveyou[] = {0x00, 0x12, 0x1e, 0x12, 0x00, 0x10, 0x38, 0x70, 0x38, 0x10, 0x00, 0x00, 0x0e, 0x08, 0x0e, 0x00};

unsigned char happyface[] = {0x00, 0x00, 0x0c, 0x02, 0x02, 0x2c, 0x60, 0x60, 0x60, 0x60, 0x2c, 0x02, 0x02, 0x0c, 0x00, 0x00};

unsigned char sadface[] = {0x00, 0x00, 0x0c, 0x02, 0x02, 0x4c, 0x20, 0x20, 0x20, 0x20, 0x4c, 0x02, 0x02, 0x0c, 0x00, 0x00};

unsigned char smileface[] = {0x00, 0x00, 0x0c, 0x02, 0x02, 0x2c, 0x40, 0x40, 0x40, 0x40, 0x2c, 0x02, 0x02, 0x0c, 0x00, 0x00};

unsigned char angryface[] = {0x02, 0x1e, 0x64, 0x84, 0xb8, 0x79, 0x2a, 0x10, 0x10, 0x2a, 0x79, 0xb8, 0x84, 0x64, 0x1e, 0x02};

unsigned char arabesque01[] = {0xa4, 0x12, 0x22, 0x4c, 0x90, 0x26, 0x21, 0x92, 0x4c, 0x40, 0x9e, 0x21, 0x29, 0xa6, 0x90, 0x48};

unsigned char chienDorian[] = {0x00, 0x3c, 0x22, 0x21, 0x11, 0x7a, 0x81, 0xad, 0xe1, 0xad, 0x82, 0x79, 0x11, 0x22, 0x3c, 0x00};

unsigned char chien01[] = {0x00, 0x3c, 0x22, 0x11, 0x39, 0x42, 0x8d, 0xe1, 0xe1, 0x8d, 0x42, 0x39, 0x11, 0x22, 0x3c, 0x00};

unsigned char chienA01[] = {0x00, 0x3c, 0x22, 0x11, 0x39, 0x42, 0x8d, 0xe1, 0xe1, 0x8d, 0x42, 0x39, 0x11, 0x22, 0x3c, 0x00};
unsigned char chienA02[] = {0x00, 0x3c, 0x22, 0x11, 0x39, 0x42, 0x8d, 0xe1, 0xe1, 0x89, 0x42, 0x39, 0x11, 0x22, 0x3c, 0x00};
unsigned char chienA03[] = {0x00, 0x3c, 0x22, 0x11, 0x39, 0x42, 0x8d, 0xe1, 0xe1, 0x81, 0x42, 0x39, 0x11, 0x22, 0x3c, 0x00};
unsigned char chienA04[] = {0x00, 0x3c, 0x22, 0x11, 0x39, 0x42, 0x8d, 0xe1, 0xe1, 0x8d, 0x42, 0x39, 0x11, 0x22, 0x3c, 0x00};

unsigned char singeDorian[] = {0x00, 0x06, 0x19, 0x21, 0x56, 0xa1, 0xad, 0x81, 0x81, 0x8d, 0x81, 0x4f, 0x21, 0x19, 0x06, 0x00};

unsigned char angrymushroomDorian[] = {0x00, 0x00, 0x04, 0x0a, 0x95, 0xa1, 0xed, 0x29, 0x29, 0xed, 0xa1, 0x95, 0x0a, 0x04, 0x00, 0x00};

unsigned char invader01[] = {0x00, 0x70, 0x18, 0x7d, 0xbe, 0xb6, 0xbe, 0x3e, 0x3e, 0xbe, 0xb6, 0xbe, 0x7d, 0x18, 0x70, 0x00};
unsigned char invader02[] = {0x00, 0x00, 0x00, 0xf0, 0x3c, 0x7e, 0xb7, 0x3e, 0x3e, 0xb7, 0x7e, 0x3c, 0xf0, 0x00, 0x00, 0x00};
unsigned char invader03[] = {0x00, 0x00, 0x80, 0x9c, 0x5e, 0x5b, 0x3b, 0x5f, 0x5f, 0x3b, 0x5b, 0x5e, 0x9c, 0x80, 0x00, 0x00};
unsigned char invader04[] = {0x00, 0x20, 0x30, 0x78, 0xec, 0x7c, 0x2e, 0x7e, 0x7e, 0x2e, 0x7c, 0xec, 0x78, 0x30, 0x20, 0x00};
unsigned char invader05[] = {0x00, 0x00, 0x00, 0x00, 0x18, 0x5c, 0xb6, 0x1f, 0x1f, 0xb6, 0x5c, 0x18, 0x00, 0x00, 0x00, 0x00};
unsigned char invader06[] = {0x00, 0x00, 0x1e, 0x38, 0xbd, 0x76, 0x3e, 0x3e, 0x3e, 0x3e, 0x76, 0xbd, 0x38, 0x1e, 0x00, 0x00};

unsigned char pacmanA01[] = {0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00};
unsigned char pacmanA02[] = {0x99, 0xbd, 0x5a, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00};
unsigned char pacmanA03[] = {0x99, 0x99, 0x5a, 0x3c, 0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00};
unsigned char pacmanA04[] = {0x00, 0x3c, 0x42, 0x81, 0x99, 0xbd, 0x5a, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00};
unsigned char pacmanA05[] = {0x00, 0x3c, 0x42, 0x81, 0x99, 0x99, 0x5a, 0x3c, 0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00};
unsigned char pacmanA06[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x42, 0x81, 0x99, 0xbd, 0x5a, 0x00, 0x00, 0x18, 0x18, 0x00};
unsigned char pacmanA07[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x42, 0x81, 0x99, 0x99, 0x5a, 0x3c, 0x00, 0x18, 0x18, 0x00};
unsigned char pacmanA08[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x42, 0x81, 0x99, 0xbd, 0x5a, 0x00};
unsigned char pacmanA09[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x42, 0x81, 0x99, 0x99, 0x5a, 0x3c};
unsigned char pacmanA10[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x42, 0x81};

unsigned char pacmanB01[] = {0x8d, 0x42, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
unsigned char pacmanB02[] = {0x8d, 0x41, 0x8d, 0x42, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
unsigned char pacmanB03[] = {0x00, 0xfc, 0x42, 0x8d, 0x41, 0x8d, 0x42, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
unsigned char pacmanB04[] = {0x81, 0x99, 0xa5, 0x42, 0x00, 0xfc, 0x42, 0x8d, 0x41, 0x8d, 0x42, 0xfc, 0x00, 0x00, 0x00, 0x00};
unsigned char pacmanB05[] = {0x00, 0x00, 0x00, 0x3c, 0x42, 0x81, 0x99, 0xa5, 0x42, 0x00, 0x00, 0xfc, 0x42, 0x8d, 0x41, 0x8d};
unsigned char pacmanB06[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x42, 0x81, 0x99, 0xa5, 0x42, 0x00, 0x00, 0xfc, 0x42};
unsigned char pacmanB07[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x42, 0x81, 0x99, 0xa5, 0x42};
unsigned char pacmanB08[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x42, 0x81};

unsigned char bomb01[] = {0x20, 0x10, 0x08, 0x04, 0x04, 0x08, 0x08, 0x04, 0x04, 0x02, 0x71, 0xf9, 0xfe, 0xf8, 0x70, 0x00};
unsigned char bomb02[] = {0x00, 0x00, 0x08, 0x04, 0x04, 0x08, 0x08, 0x04, 0x04, 0x02, 0x71, 0xf9, 0xfe, 0xf8, 0x70, 0x00};
unsigned char bomb03[] = {0x00, 0x00, 0x00, 0x00, 0x04, 0x08, 0x08, 0x04, 0x04, 0x02, 0x71, 0xf9, 0xfe, 0xf8, 0x70, 0x00};
unsigned char bomb04[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x04, 0x04, 0x02, 0x71, 0xf9, 0xfe, 0xf8, 0x70, 0x00};
unsigned char bomb05[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x02, 0x71, 0xf9, 0xfe, 0xf8, 0x70, 0x00};
unsigned char bomb06[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0xf9, 0xfe, 0xf8, 0x70, 0x00};
unsigned char bomb07[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xf8, 0xfe, 0xf8, 0x70, 0x00};
unsigned char bomb08[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xf8, 0xfc, 0xf8, 0x70, 0x00};
unsigned char bomb09[] = {0xf8, 0xa8, 0xb8, 0xe0, 0x0e, 0x0a, 0x0e, 0x00, 0x77, 0x25, 0x47, 0x20, 0x70, 0x00, 0x5e, 0x00};

unsigned char effectA01[] = {0xff, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0xff};
unsigned char effectA02[] = {0x00, 0x7e, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x7e, 0x00};
unsigned char effectA03[] = {0x00, 0x00, 0x3c, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x3c, 0x00, 0x00};
unsigned char effectA04[] = {0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00};
unsigned char effectA05[] = {0x00, 0x00, 0x3c, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x3c, 0x00, 0x00};
unsigned char effectA06[] = {0x00, 0x7e, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x7e, 0x00};
unsigned char effectA07[] = {0xff, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0xff};

unsigned char effectB01[] = {0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18};
unsigned char effectB02[] = {0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18};
unsigned char effectB03[] = {0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18};
unsigned char effectB04[] = {0x00, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x00};
unsigned char effectB05[] = {0x00, 0x00, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x00, 0x00};
unsigned char effectB06[] = {0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00};
unsigned char effectB07[] = {0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00};
unsigned char effectB08[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00};
unsigned char effectB09[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
unsigned char effectB10[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
unsigned char effectB11[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
unsigned char effectB12[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00};
unsigned char effectB13[] = {0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00};
unsigned char effectB14[] = {0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00};
unsigned char effectB15[] = {0x00, 0x00, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x00, 0x00};
unsigned char effectB16[] = {0x00, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x00};
unsigned char effectB17[] = {0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18};
unsigned char effectB18[] = {0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18};
unsigned char effectB19[] = {0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18};
unsigned char effectB20[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};


unsigned char clear[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
#define SCL_Pin  A5  //Set clock pin to A5
#define SDA_Pin  A4  //Set data pin to A4
void setup() {
  //Set pin to output
  pinMode(SCL_Pin, OUTPUT);
  pinMode(SDA_Pin, OUTPUT);
  //Clear the matrix display
  matrix_display(clear);
  Serial.begin(9600);
}
void loop() {
  dotmatrixleds();
}

void dotmatrixleds() {
    /*matrix_display(start01);  //Display start pattern
    delay(2000);
    matrix_display(front);    ///Front pattern
    delay(2000);
    matrix_display(STOP01);   //Stop pattern
    delay(2000);
    matrix_display(back);  //Display start pattern
    delay(2000);
    matrix_display(left);    ///Front pattern
    delay(2000);
    matrix_display(right);   //Stop pattern
    delay(2000);*/
  Serial.println ("");
  z = 1 + random (18);
  //z = 14;
  Serial.print (z);
  
  if (z == 1) {
    matrix_display(I);
    delay(2000);
    y = 1 + random (2);
    Serial.print (y);
    if (y == 1) {
      matrix_display(hearth01);
      delay(2000);
    };
    if (y == 2) {
      matrix_display(hearth02);
      delay(2000);
    };
    matrix_display(you);
    delay(2000);
  };

  if (z == 2) {
    matrix_display(effectA01);  
    delay(500);
    matrix_display(effectA02);    
    delay(500);
    matrix_display(effectA03);   
    delay(500);
    matrix_display(effectA04);  
    delay(500);
    matrix_display(effectA05);    
    delay(500);
    matrix_display(effectA06);   
    delay(500);
    matrix_display(effectA07);  
    delay(500);
  };

  if (z == 3) {
    matrix_display(pacmanB01);  
    delay(200);
    matrix_display(pacmanB02);    
    delay(200);
    matrix_display(pacmanB03);  
    delay(200);
    matrix_display(pacmanB04);  
    delay(200);
    matrix_display(pacmanB05);    
    delay(200);
    matrix_display(pacmanB06);  
    delay(200);
    matrix_display(pacmanB07);   
    delay(200);
    matrix_display(pacmanB08);   
    delay(200);
  };

  if (z == 4) {
    matrix_display(invader01);    
    delay(1000);
    matrix_display(invader02);    
    delay(1000);
    matrix_display(invader03);   
    delay(1000);
    matrix_display(invader04);    
    delay(1000);
    matrix_display(invader05);   
    delay(1000);
    matrix_display(invader06);    
    delay(1000);
  };

  if (z == 5) {
    matrix_display(amongus);
    delay(2000);
  };

  if (z == 6) {
    matrix_display(angryface);
    delay(2000);
  };

  if (z == 7) {
    matrix_display(bomb01); 
    delay(500);
    matrix_display(bomb02);  
    delay(500);
    matrix_display(bomb03);  
    delay(500);
    matrix_display(bomb04);  
    delay(500);
    matrix_display(bomb05);    
    delay(500);
    matrix_display(bomb06); 
    delay(500);
    matrix_display(bomb07);  
    delay(500);
    matrix_display(bomb08);    
    delay(500);
    matrix_display(bomb09);    
    delay(1000);
  };

  if (z == 8) {
    matrix_display(effectB01);  
    delay(100);
    matrix_display(effectB02);    
    delay(100);
    matrix_display(effectB03); 
    delay(100);
    matrix_display(effectB04); 
    delay(100);
    matrix_display(effectB05);   
    delay(100);
    matrix_display(effectB06);   
    delay(100);
    matrix_display(effectB07);  
    delay(100);
    matrix_display(effectB08);  
    delay(100);
    matrix_display(effectB09);    
    delay(100);
    matrix_display(effectB10);   
    delay(100);
    matrix_display(effectB11);  
    delay(100);
    matrix_display(effectB12);    
    delay(100);
    matrix_display(effectB13);  
    delay(100);
    matrix_display(effectB14); 
    delay(100);
    matrix_display(effectB15);  
    delay(100);
    matrix_display(effectB16);    
    delay(100);
    matrix_display(effectB17);   
    delay(100);
    matrix_display(effectB18);  
    delay(100);
  };

  if (z == 9) {
    matrix_display(arabesque01);
    delay(2000);
  };

  if (z == 10) {
    matrix_display(angrymushroomDorian);
    delay(2000);
  };

  if (z == 11) {
    matrix_display(chienDorian);
    delay(2000);
  };

  if (z == 12) {
    matrix_display(singeDorian);
    delay(2000);
  };

  if (z == 13) {
    matrix_display(chien01);
    delay(2000);
  };

  if (z == 14) {
    matrix_display(chienA01);  
    delay(500);
    matrix_display(chienA02);    
    delay(100);
    matrix_display(chienA03);  
    delay(500);
    matrix_display(chienA04);  
    delay(500);
  };

  if (z == 15) {
    matrix_display(iloveyou);
    delay(2000);
  };

  if (z == 16) {
    matrix_display(happyface);
    delay(2000);
  };

  if (z == 17) {
    matrix_display(sadface);
    delay(2000);
  };

  if (z == 18) {
    matrix_display(smileface);
    delay(2000);
  };

  //matrix_display(clear);    //Clear the matrix display
}

//this function is used for dot matrix display
void matrix_display(unsigned char matrix_value[])
{
  IIC_start();  //the function to call the data transmission
  IIC_send(0xc0);  //Select address
  for (int i = 0; i < 16; i++) //Pattern data has 16 bytes
  {
    IIC_send(matrix_value[i]); //data to convey patterns
  }
  IIC_end();   //end the transmission of patterns data
  IIC_start();
  IIC_send(0x8A);  //display control, set pulse width to 4/16
  IIC_end();
}
//  the condition that data transmission starts
void IIC_start()
{
  digitalWrite(SCL_Pin, HIGH);
  delayMicroseconds(3);
  digitalWrite(SDA_Pin, HIGH);
  delayMicroseconds(3);
  digitalWrite(SDA_Pin, LOW);
  delayMicroseconds(3);
}
// transmit data
void IIC_send(unsigned char send_data)
{
  for (char i = 0; i < 8; i++) //Every character has 8 bits
  {
    digitalWrite(SCL_Pin, LOW); //pull down the SCL_Pin to change the signal of SDA
    delayMicroseconds(3);
    if (send_data & 0x01) //1 or 0 of byte  is used to set high and low level of SDA_Pin
    {
      digitalWrite(SDA_Pin, HIGH);
    }
    else
    {
      digitalWrite(SDA_Pin, LOW);
    }
    delayMicroseconds(3);
    digitalWrite(SCL_Pin, HIGH); //Pull up SCL_Pin to stop data transmission
    delayMicroseconds(3);
    send_data = send_data >> 1;  //Detect bit by bit, so move the data right by one bit
  }
}
//the sign that data transmission ends
void IIC_end()
{
  digitalWrite(SCL_Pin, LOW);
  delayMicroseconds(3);
  digitalWrite(SDA_Pin, LOW);
  delayMicroseconds(3);
  digitalWrite(SCL_Pin, HIGH);
  delayMicroseconds(3);
  digitalWrite(SDA_Pin, HIGH);
  delayMicroseconds(3);
}
//****************************************************************************
